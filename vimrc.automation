autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif
augroup vimscript
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END

augroup HTML
    autocmd!
    au BufRead,BufNewFile *.phtml  set filetype=html
augroup END

augroup JavaScript
    autocmd!
    autocmd FileType javascript setlocal shiftwidth=4 softtabstop=4 tabstop=4
augroup END


" Layout switching&indication -->
" English layout active windows status line is DarkBlue
" English layout active windows status line is DarkRed
function MyKeyMapHighlight()
  if &iminsert == 0
    hi StatusLine ctermfg=DarkBlue guifg=DarkBlue
  else
    hi StatusLine ctermfg=DarkRed guifg=DarkRed
  endif
endfunction
" call our func on startup and redraw colors
call MyKeyMapHighlight()
" update layout indication on window change
au WinEnter * :call MyKeyMapHighlight()
" <--

let mapleader=','

" Toggle NerdTree Plugin
nnoremap <leader>n :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" Remove the remaining highlight search
nnoremap <leader><cr> :noh<cr>

" Common replacements for yanking
nnoremap Y y$

" Easy align plugin  invocation
vnoremap <Enter> <Plug>(EasyAlign)
vnoremap <Leader>a <Plug>(EasyAlign)

" Remapping arrow keys to understand wrappings
nnoremap <silent> <Up> gk
inoremap <silent> <Up> <C-o>gk
nnoremap <silent> <Down> gj
inoremap <silent> <Down> <C-o>gj
nnoremap <silent> <home> g<home>
inoremap <silent> <home> <C-o>g<home>

" Remapping dir keys to understand wrappings
nnoremap <silent> j gj
vnoremap <silent> j gj
nnoremap <silent> k gk
vnoremap <silent> k gk

" Reselect previous selection and indent it
vnoremap < <gv
vnoremap > >gv

" Toggle tag bar
nnoremap <F8> :TagbarToggle<br>

" ru/en lang switch ^f (Ctrl + F)
cnoremap <silent> <C-F> <C-^>
inoremap <silent> <C-F> <C-^>X<Esc>:call MyKeyMapHighlight()<CR>a<C-H>
nnoremap <silent> <C-F> a<C-^><Esc>:call MyKeyMapHighlight()<CR>
vnoremap <silent> <C-F> <Esc>a<C-^><Esc>:call MyKeyMapHighlight()<CR>gv

"-------------------------
" Syntastic

" Enable autochecks
let g:syntastic_check_on_open=1
let g:syntastic_enable_signs=1

" open quicfix window with all error found
nnoremap <silent> <leader>ll :lopen<cr>

"-------------------------
" DelimitMate

" Delimitmate place cursor correctly n multiline objects e.g.
" if you press enter in {} cursor still be
" in the middle line instead of the last
let delimitMate_expand_cr = 1

" Delimitmate place cursor correctly in singleline pairs e.g.
" if x - cursor if you press space in {x} result will be { x } instead of { x}
let delimitMate_expand_space = 1
