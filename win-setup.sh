#!/usr/bin/env bash

cmd <<<'mklink /D %homepath%\.ssh Z:\.ssh' >/dev/null
cmd <<<'mklink %homepath%\.bash_profile_default %homepath%\dotfiles\.bash_profile_default' >/dev/null
cmd <<<'mklink %homepath%\.inputrc %homepath%\dotfiles\.inputrc' >/dev/null
cmd <<<'mklink "%homepath%\.zshrc" "%homepath%\dotfiles\.zshrc"' >/dev/null
cmd <<<'mklink "%homepath%\.zprofile" "%homepath%\dotfiles\.zprofile"' >/dev/null
cmd <<<'mklink "%homepath%\.profile_default" "%homepath%\dotfiles\.profile_default"' >/dev/null
cmd <<<'mklink "%homepath%\.dircolors" "%homepath%\dotfiles\.dircolors"' >/dev/null
cmd <<<'mklink "%homepath%\.tmux.conf" "%homepath%\dotfiles\.tmux.conf"' >/dev/null
cmd <<<'mklink "%homepath%\.ideavimrc" "%homepath%\dotfiles\.ideavimrc"' >/dev/null
cmd <<<'mklink "%homepath%\.gitconfig" "%homepath%\dotfiles\.gitconfig"' >/dev/null

cat <<EOF >~/.bash_profile
# generated by ~/dotfiles/win-setup.sh
test -f ~/.profile && . ~/.profile
test -f ~/.bashrc && . ~/.bashrc

source ~/dotfiles/scripts/win/fix_docker.sh
export PATH="$PATH:/c/Program Files/StaxRip/Apps/Encoders/ffmpeg"

EOF

cat <<EOF >~/.bashrc
# generated by ~/dotfiles/win-setup.sh
[[ $- == *i* ]] || return
source ~/.bash_profile_default
source ~/dotfiles/light-setup.sh
source ~/dotfiles/auto-ssh-agent.sh

EOF

if ! hash scoop 2>/dev/null; then
    echo 'Installing scoop...'
    powershell -Command 'Set-ExecutionPolicy RemoteSigned -scope CurrentUser; iex (new-object net.webclient).downloadstring("https://get.scoop.sh")'
    scoop update
fi

if ! hash shfmt 2>/dev/null; then
    scoop install shfmt
fi

if ! hash shellcheck 2>/dev/null; then
    scoop install shellcheck
fi

if ! hash make 2>/dev/null; then
    scoop install make
fi

if ! hash telnet 2>/dev/null; then
    scoop install telnet
fi

if ! hash pngcrush 2>/dev/null; then
    # pngcrush -rem gAMA -rem cHRM -rem iCCP -rem sRGB infile.png outfile.png
    scoop install pngcrush
fi

if ! hash terraform 2>/dev/null; then
    scoop install terraform
fi

# if ! hash rsync 2>/dev/null; then
#     scoop install ../scripts/win/rsync-via-git.json
# fi

if ! hash python 2>/dev/null; then
    scoop install python
    pip install --upgrade pip
fi

if ! hash pre-commit 2>/dev/null; then
    pip install pre-commit
fi

CF_DIR="C:\WINDOWS\System32\config\systemprofile\.cloudflared"

if [ ! -f "$CF_DIR\config.yml" ]; then

    mkdir -p "$CF_DIR"

    cat <<EOF >"$CF_DIR\config.yml"
metrics: localhost:11111
no-autoupdate: true
proxy-dns: true
logfile: cloudflared.log
proxy-dns-upstream:
  - https://1.1.1.1/dns-query
  - https://1.0.0.1/dns-query
  - https://2606:4700:4700::1111/dns-query
  - https://2606:4700:4700::1001/dns-query

EOF

    # "https://developers.cloudflare.com/argo-tunnel/downloads/#windows"
    curl -sLo "$HOME/Downloads/cloudflared.zip" "https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-windows-amd64.zip"
    powershell -NoP -NonI -Command "Expand-Archive \$Home\Downloads\cloudflared.zip '$CF_DIR'"
    rm "$HOME/Downloads/cloudflared.zip"

    powershell "Start-Process cmd -verb runas -Wait -ArgumentList ('/C', 'reg delete HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\EventLog\Application\Cloudflared /f')" >/dev/null
    powershell "Start-Process cmd -verb runas -Wait -ArgumentList ('/C',
        '\
        C:\WINDOWS\System32\config\systemprofile\.cloudflared\cloudflared.exe service install && \
        net start cloudflared & \
        pause')
    " >/dev/null

    powershell "Start-Process cmd -verb runas -Wait -ArgumentList ('/C',
        '
        netsh interface ip set dns name=\"Ethernet\" static 127.0.0.1
        netsh interface ip add dns name=\"Ethernet\" 127.0.0.1 index=2
        ')
    " >/dev/null
fi
